// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -package=templatesmanagermocks -source=manager.go -destination=./mocks/manager.go
//

// Package templatesmanagermocks is a generated GoMock package.
package templatesmanagermocks

import (
	template "html/template"
	reflect "reflect"
	template0 "text/template"

	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockManager) Load(name string) (*template0.Template, *template.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", name)
	ret0, _ := ret[0].(*template0.Template)
	ret1, _ := ret[1].(*template.Template)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Load indicates an expected call of Load.
func (mr *MockManagerMockRecorder) Load(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockManager)(nil).Load), name)
}
