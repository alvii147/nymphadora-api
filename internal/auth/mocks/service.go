// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -package=authmocks -source=service.go -destination=./mocks/service.go
//
// Package authmocks is a generated GoMock package.
package authmocks

import (
	context "context"
	reflect "reflect"
	sync "sync"
	time "time"

	auth "github.com/alvii147/nymphadora-api/internal/auth"
	templatesmanager "github.com/alvii147/nymphadora-api/internal/templatesmanager"
	jsonutils "github.com/alvii147/nymphadora-api/pkg/jsonutils"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockService) ActivateUser(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockServiceMockRecorder) ActivateUser(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockService)(nil).ActivateUser), ctx, token)
}

// CreateAPIKey mocks base method.
func (m *MockService) CreateAPIKey(ctx context.Context, name string, expiresAt *time.Time) (*auth.APIKey, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, name, expiresAt)
	ret0, _ := ret[0].(*auth.APIKey)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockServiceMockRecorder) CreateAPIKey(ctx, name, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockService)(nil).CreateAPIKey), ctx, name, expiresAt)
}

// CreateJWT mocks base method.
func (m *MockService) CreateJWT(ctx context.Context, email, password string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWT", ctx, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateJWT indicates an expected call of CreateJWT.
func (mr *MockServiceMockRecorder) CreateJWT(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWT", reflect.TypeOf((*MockService)(nil).CreateJWT), ctx, email, password)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, wg *sync.WaitGroup, email, password, firstName, lastName string) (*auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, wg, email, password, firstName, lastName)
	ret0, _ := ret[0].(*auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, wg, email, password, firstName, lastName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, wg, email, password, firstName, lastName)
}

// DeleteAPIKey mocks base method.
func (m *MockService) DeleteAPIKey(ctx context.Context, apiKeyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, apiKeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockServiceMockRecorder) DeleteAPIKey(ctx, apiKeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockService)(nil).DeleteAPIKey), ctx, apiKeyID)
}

// FindAPIKey mocks base method.
func (m *MockService) FindAPIKey(ctx context.Context, rawKey string) (*auth.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKey", ctx, rawKey)
	ret0, _ := ret[0].(*auth.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKey indicates an expected call of FindAPIKey.
func (mr *MockServiceMockRecorder) FindAPIKey(ctx, rawKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKey", reflect.TypeOf((*MockService)(nil).FindAPIKey), ctx, rawKey)
}

// GetAuthenticatedUser mocks base method.
func (m *MockService) GetAuthenticatedUser(ctx context.Context) (*auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatedUser", ctx)
	ret0, _ := ret[0].(*auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatedUser indicates an expected call of GetAuthenticatedUser.
func (mr *MockServiceMockRecorder) GetAuthenticatedUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedUser", reflect.TypeOf((*MockService)(nil).GetAuthenticatedUser), ctx)
}

// ListAPIKeys mocks base method.
func (m *MockService) ListAPIKeys(ctx context.Context) ([]*auth.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKeys", ctx)
	ret0, _ := ret[0].([]*auth.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockServiceMockRecorder) ListAPIKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockService)(nil).ListAPIKeys), ctx)
}

// RefreshJWT mocks base method.
func (m *MockService) RefreshJWT(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshJWT", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshJWT indicates an expected call of RefreshJWT.
func (mr *MockServiceMockRecorder) RefreshJWT(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshJWT", reflect.TypeOf((*MockService)(nil).RefreshJWT), ctx, token)
}

// SendUserActivationMail mocks base method.
func (m *MockService) SendUserActivationMail(ctx context.Context, email string, data templatesmanager.ActivationEmailTemplateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserActivationMail", ctx, email, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserActivationMail indicates an expected call of SendUserActivationMail.
func (mr *MockServiceMockRecorder) SendUserActivationMail(ctx, email, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserActivationMail", reflect.TypeOf((*MockService)(nil).SendUserActivationMail), ctx, email, data)
}

// UpdateAPIKey mocks base method.
func (m *MockService) UpdateAPIKey(ctx context.Context, apiKeyID int64, name *string, expiresAt jsonutils.Optional[time.Time]) (*auth.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", ctx, apiKeyID, name, expiresAt)
	ret0, _ := ret[0].(*auth.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockServiceMockRecorder) UpdateAPIKey(ctx, apiKeyID, name, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockService)(nil).UpdateAPIKey), ctx, apiKeyID, name, expiresAt)
}

// UpdateAuthenticatedUser mocks base method.
func (m *MockService) UpdateAuthenticatedUser(ctx context.Context, firstName, lastName *string) (*auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthenticatedUser", ctx, firstName, lastName)
	ret0, _ := ret[0].(*auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthenticatedUser indicates an expected call of UpdateAuthenticatedUser.
func (mr *MockServiceMockRecorder) UpdateAuthenticatedUser(ctx, firstName, lastName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthenticatedUser", reflect.TypeOf((*MockService)(nil).UpdateAuthenticatedUser), ctx, firstName, lastName)
}

// ValidateJWT mocks base method.
func (m *MockService) ValidateJWT(ctx context.Context, token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJWT", ctx, token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateJWT indicates an expected call of ValidateJWT.
func (mr *MockServiceMockRecorder) ValidateJWT(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJWT", reflect.TypeOf((*MockService)(nil).ValidateJWT), ctx, token)
}
