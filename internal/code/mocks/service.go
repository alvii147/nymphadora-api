// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -package=codemocks -source=service.go -destination=./mocks/service.go
//
// Package codemocks is a generated GoMock package.
package codemocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/alvii147/nymphadora-api/internal/auth"
	code "github.com/alvii147/nymphadora-api/internal/code"
	templatesmanager "github.com/alvii147/nymphadora-api/internal/templatesmanager"
	api "github.com/alvii147/nymphadora-api/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AcceptCodeSpaceUserInvitation mocks base method.
func (m *MockService) AcceptCodeSpaceUserInvitation(ctx context.Context, name, token string) (*code.CodeSpace, *code.CodeSpaceAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptCodeSpaceUserInvitation", ctx, name, token)
	ret0, _ := ret[0].(*code.CodeSpace)
	ret1, _ := ret[1].(*code.CodeSpaceAccess)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AcceptCodeSpaceUserInvitation indicates an expected call of AcceptCodeSpaceUserInvitation.
func (mr *MockServiceMockRecorder) AcceptCodeSpaceUserInvitation(ctx, name, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptCodeSpaceUserInvitation", reflect.TypeOf((*MockService)(nil).AcceptCodeSpaceUserInvitation), ctx, name, token)
}

// CreateCodeSpace mocks base method.
func (m *MockService) CreateCodeSpace(ctx context.Context, language string) (*code.CodeSpace, *code.CodeSpaceAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCodeSpace", ctx, language)
	ret0, _ := ret[0].(*code.CodeSpace)
	ret1, _ := ret[1].(*code.CodeSpaceAccess)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCodeSpace indicates an expected call of CreateCodeSpace.
func (mr *MockServiceMockRecorder) CreateCodeSpace(ctx, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCodeSpace", reflect.TypeOf((*MockService)(nil).CreateCodeSpace), ctx, language)
}

// DeleteCodeSpace mocks base method.
func (m *MockService) DeleteCodeSpace(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCodeSpace", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCodeSpace indicates an expected call of DeleteCodeSpace.
func (mr *MockServiceMockRecorder) DeleteCodeSpace(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodeSpace", reflect.TypeOf((*MockService)(nil).DeleteCodeSpace), ctx, name)
}

// GetCodespace mocks base method.
func (m *MockService) GetCodespace(ctx context.Context, name string) (*code.CodeSpace, *code.CodeSpaceAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodespace", ctx, name)
	ret0, _ := ret[0].(*code.CodeSpace)
	ret1, _ := ret[1].(*code.CodeSpaceAccess)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCodespace indicates an expected call of GetCodespace.
func (mr *MockServiceMockRecorder) GetCodespace(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodespace", reflect.TypeOf((*MockService)(nil).GetCodespace), ctx, name)
}

// InviteCodeSpaceUser mocks base method.
func (m *MockService) InviteCodeSpaceUser(ctx context.Context, name, inviteeEmail string, accessLevel code.CodeSpaceAccessLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteCodeSpaceUser", ctx, name, inviteeEmail, accessLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteCodeSpaceUser indicates an expected call of InviteCodeSpaceUser.
func (mr *MockServiceMockRecorder) InviteCodeSpaceUser(ctx, name, inviteeEmail, accessLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteCodeSpaceUser", reflect.TypeOf((*MockService)(nil).InviteCodeSpaceUser), ctx, name, inviteeEmail, accessLevel)
}

// ListCodeSpaces mocks base method.
func (m *MockService) ListCodeSpaces(ctx context.Context) ([]*code.CodeSpace, []*code.CodeSpaceAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodeSpaces", ctx)
	ret0, _ := ret[0].([]*code.CodeSpace)
	ret1, _ := ret[1].([]*code.CodeSpaceAccess)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCodeSpaces indicates an expected call of ListCodeSpaces.
func (mr *MockServiceMockRecorder) ListCodeSpaces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeSpaces", reflect.TypeOf((*MockService)(nil).ListCodeSpaces), ctx)
}

// ListCodespaceUsers mocks base method.
func (m *MockService) ListCodespaceUsers(ctx context.Context, name string) ([]*auth.User, []*code.CodeSpaceAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCodespaceUsers", ctx, name)
	ret0, _ := ret[0].([]*auth.User)
	ret1, _ := ret[1].([]*code.CodeSpaceAccess)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCodespaceUsers indicates an expected call of ListCodespaceUsers.
func (mr *MockServiceMockRecorder) ListCodespaceUsers(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodespaceUsers", reflect.TypeOf((*MockService)(nil).ListCodespaceUsers), ctx, name)
}

// RemoveCodeSpaceUser mocks base method.
func (m *MockService) RemoveCodeSpaceUser(ctx context.Context, name, inviteeUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCodeSpaceUser", ctx, name, inviteeUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCodeSpaceUser indicates an expected call of RemoveCodeSpaceUser.
func (mr *MockServiceMockRecorder) RemoveCodeSpaceUser(ctx, name, inviteeUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCodeSpaceUser", reflect.TypeOf((*MockService)(nil).RemoveCodeSpaceUser), ctx, name, inviteeUUID)
}

// RunCodeSpace mocks base method.
func (m *MockService) RunCodeSpace(ctx context.Context, name string) (*api.PistonExecuteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCodeSpace", ctx, name)
	ret0, _ := ret[0].(*api.PistonExecuteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCodeSpace indicates an expected call of RunCodeSpace.
func (mr *MockServiceMockRecorder) RunCodeSpace(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCodeSpace", reflect.TypeOf((*MockService)(nil).RunCodeSpace), ctx, name)
}

// SendCodeSpaceInvitationMail mocks base method.
func (m *MockService) SendCodeSpaceInvitationMail(ctx context.Context, email string, data templatesmanager.CodeSpaceInvitationEmailTemplateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCodeSpaceInvitationMail", ctx, email, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCodeSpaceInvitationMail indicates an expected call of SendCodeSpaceInvitationMail.
func (mr *MockServiceMockRecorder) SendCodeSpaceInvitationMail(ctx, email, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCodeSpaceInvitationMail", reflect.TypeOf((*MockService)(nil).SendCodeSpaceInvitationMail), ctx, email, data)
}

// UpdateCodeSpace mocks base method.
func (m *MockService) UpdateCodeSpace(ctx context.Context, name string, contents *string) (*code.CodeSpace, *code.CodeSpaceAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCodeSpace", ctx, name, contents)
	ret0, _ := ret[0].(*code.CodeSpace)
	ret1, _ := ret[1].(*code.CodeSpaceAccess)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCodeSpace indicates an expected call of UpdateCodeSpace.
func (mr *MockServiceMockRecorder) UpdateCodeSpace(ctx, name, contents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCodeSpace", reflect.TypeOf((*MockService)(nil).UpdateCodeSpace), ctx, name, contents)
}
