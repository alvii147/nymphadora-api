// Code generated by MockGen. DO NOT EDIT.
// Source: mailclient.go
//
// Generated by this command:
//
//	mockgen -package=mailclientmocks -source=mailclient.go -destination=./mocks/mailclient.go
//

// Package mailclientmocks is a generated GoMock package.
package mailclientmocks

import (
	template "html/template"
	reflect "reflect"
	template0 "text/template"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockClient) Send(to []string, subject string, textTmpl *template0.Template, htmlTmpl *template.Template, tmplData any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", to, subject, textTmpl, htmlTmpl, tmplData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(to, subject, textTmpl, htmlTmpl, tmplData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), to, subject, textTmpl, htmlTmpl, tmplData)
}
