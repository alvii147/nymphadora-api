// Code generated by MockGen. DO NOT EDIT.
// Source: piston.go
//
// Generated by this command:
//
//	mockgen -package=pistonmocks -source=piston.go -destination=./mocks/piston.go
//
// Package pistonmocks is a generated GoMock package.
package pistonmocks

import (
	reflect "reflect"

	api "github.com/alvii147/nymphadora-api/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockClient) Execute(request *api.PistonExecuteRequest) (*api.PistonExecuteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", request)
	ret0, _ := ret[0].(*api.PistonExecuteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockClientMockRecorder) Execute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockClient)(nil).Execute), request)
}
