SRC=cmd/main.go
DEST=bin/main
COVERAGE_FILE=coverage.out
MIGRATIONS=migrations

export NYMPHADORAAPI_HOSTNAME ?= localhost
export NYMPHADORAAPI_PORT ?= 8080
export NYMPHADORAAPI_SECRET_KEY ?= 48208af6a504162f1799c99127de37e1a94eb6d2aa1597f59a7c20bf94c9a6d1
export NYMPHADORAAPI_FRONTEND_BASE_URL ?= http://localhost:3000
export NYMPHADORAAPI_POSTGRES_HOSTNAME ?= localhost
export NYMPHADORAAPI_POSTGRES_PORT ?= 5432
export NYMPHADORAAPI_POSTGRES_USERNAME ?= postgres
export NYMPHADORAAPI_POSTGRES_PASSWORD ?= postgres
export NYMPHADORAAPI_POSTGRES_DATABASE_NAME ?= nymphadoradb
export NYMPHADORAAPI_SMTP_HOSTNAME ?= smtp.gmail.com
export NYMPHADORAAPI_SMTP_PORT ?= 587
export NYMPHADORAAPI_SMTP_USERNAME ?=
export NYMPHADORAAPI_SMTP_PASSWORD ?=
export NYMPHADORAAPI_MAIL_CLIENT_TYPE ?= console
export NYMPHADORAAPI_PISTON_API_KEY ?=

POSTGRES_EXEC=PGPASSWORD=$(NYMPHADORAAPI_POSTGRES_PASSWORD) psql --username=$(NYMPHADORAAPI_POSTGRES_USERNAME) --host=$(NYMPHADORAAPI_POSTGRES_HOSTNAME) --port=$(NYMPHADORAAPI_POSTGRES_PORT)
POSTGRES_CONN_STRING=postgresql://$(NYMPHADORAAPI_POSTGRES_USERNAME):$(NYMPHADORAAPI_POSTGRES_PASSWORD)@$(NYMPHADORAAPI_POSTGRES_HOSTNAME):$(NYMPHADORAAPI_POSTGRES_PORT)
POSTGRES_TEST_DATABASE_NAME=test_$(NYMPHADORAAPI_POSTGRES_DATABASE_NAME)
POSTGRES_MIGRATIONS_TABLE_NAME=schema_migration
POSTGRES_CONN_QUERY_PARAMS=sslmode=disable&x-migrations-table=$(POSTGRES_MIGRATIONS_TABLE_NAME)

TEST_GOMAXPROCS=2
TEST_OPTS=-coverprofile $(COVERAGE_FILE)
ifdef TESTCASE
	TEST_OPTS=-run $(TESTCASE)
endif

ifeq ($(VERBOSE), 1)
	TEST_OPTS:=$(TEST_OPTS) -v
endif

.PHONY: docker-up
docker-up:
	docker compose up -d

.PHONY: docker-down
docker-down:
	docker compose down

.PHONY: build
build:
	go build -o $(DEST) $(SRC)

.PHONY: server
server: build
	./$(DEST)

.PHONY: test
test:
	$(POSTGRES_EXEC) --command="CREATE DATABASE $(POSTGRES_TEST_DATABASE_NAME);"
	migrate -path $(MIGRATIONS) -database "$(POSTGRES_CONN_STRING)/$(POSTGRES_TEST_DATABASE_NAME)?$(POSTGRES_CONN_QUERY_PARAMS)" -verbose up
	-GOMAXPROCS=$(TEST_GOMAXPROCS) NYMPHADORAAPI_POSTGRES_DATABASE_NAME=$(POSTGRES_TEST_DATABASE_NAME) go test $(TEST_OPTS) ./...
	$(POSTGRES_EXEC) --command="DROP DATABASE $(POSTGRES_TEST_DATABASE_NAME);"
	grep -v "/mocks/" $(COVERAGE_FILE) > $(COVERAGE_FILE).tmp
	mv $(COVERAGE_FILE).tmp $(COVERAGE_FILE)

.PHONY: cover
cover:
	go tool cover -func $(COVERAGE_FILE)

.PHONY: mocks
mocks:
	go generate ./...

.PHONY: migration
migration:
	migrate create -ext sql -dir $(MIGRATIONS) -seq $(NAME)

.PHONY: migrate
migrate:
	migrate -path $(MIGRATIONS) -database "$(POSTGRES_CONN_STRING)/$(NYMPHADORAAPI_POSTGRES_DATABASE_NAME)?$(POSTGRES_CONN_QUERY_PARAMS)" -verbose up

.PHONY: migrate-down
migrate-down:
	migrate -path $(MIGRATIONS) -database "$(POSTGRES_CONN_STRING)/$(NYMPHADORAAPI_POSTGRES_DATABASE_NAME)?$(POSTGRES_CONN_QUERY_PARAMS)" -verbose down

.PHONY: lint
lint:
	golangci-lint run
